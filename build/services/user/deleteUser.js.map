{"version":3,"sources":["../../../src/services/user/deleteUser.ts"],"names":["geoFirestore","GeoFirestore","firestore","geoUserLocations","collection","deleteUser","uid","doc","get","userDoc","exists","Error","userEntity","data","where","chatQuery","chatDeletes","docs","forEach","push","id","Promise","all","type","jobsQuery","locationKey","req","res","body","status","send","console","log","Sentry","captureException"],"mappings":"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","sourcesContent":["import { auth, firestore, messaging } from \"../../firebase\";\nimport admin from \"firebase-admin\";\nimport {\n  GeoFirestore,\n  GeoCollectionReference,\n  GeoDocumentReference,\n  GeoQuery,\n  GeoQuerySnapshot\n} from \"geofirestore\";\nimport moment from \"moment\";\nimport * as Sentry from \"@sentry/node\";\nimport { Student, Hirer } from \"../../schemas/User\";\n\nlet geoFirestore = new GeoFirestore(firestore);\nconst geoUserLocations: GeoCollectionReference = geoFirestore.collection(\n  \"userLocations\"\n);\n\nexport const deleteUser = async (uid: string) => {\n  // get user entity\n  const userDoc = await firestore\n    .collection(\"users\")\n    .doc(uid)\n    .get();\n  if (!userDoc.exists) {\n    throw new Error(\"User does not exist\");\n  }\n\n  const userEntity = userDoc.data() as Student | Hirer;\n\n  // delete chats\n  const chatQuery = await firestore\n    .collection(\"chats\")\n    .where(\"hirer.id\", \"==\", uid)\n    .get();\n  let chatDeletes: any[] = [];\n  chatQuery.docs.forEach(doc => {\n    chatDeletes.push(\n      firestore\n        .collection(\"chats\")\n        .doc(doc.id)\n        .delete()\n    );\n  });\n  await Promise.all(chatDeletes);\n\n  // TODO: notify other party in chat that it was closed?\n\n  if (userEntity.type == \"hirer\") {\n    // delete jobs\n    const jobsQuery = await firestore\n      .collection(\"jobs\")\n      .where(\"hirer.id\", \"==\", uid)\n      .get();\n    let chatDeletes: any[] = [];\n    chatQuery.docs.forEach(doc => {\n      chatDeletes.push(\n        firestore\n          .collection(\"chats\")\n          .doc(doc.id)\n          .delete()\n      );\n    });\n    await Promise.all(chatDeletes);\n  }\n\n  // delete location key\n  if (userEntity.locationKey) {\n    await geoUserLocations.doc(userEntity.locationKey).delete();\n  }\n\n  // delete job itself\n  await firestore\n    .collection(\"users\")\n    .doc(uid)\n    .delete();\n\n  return;\n};\n\nexport default async (req: any, res: any) => {\n  try {\n    const { uid }: { uid: string } = req.body;\n    await deleteUser(uid);\n    return res.status(200).send();\n  } catch (error) {\n    res.status(error.status).send(\"Something broke!\");\n    console.log(\"Error: \" + error);\n    Sentry.captureException(error);\n  }\n};\n"],"file":"deleteUser.js"}