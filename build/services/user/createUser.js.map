{"version":3,"sources":["../../../src/services/user/createUser.ts"],"names":["createUser","uid","data","type","firestore","collection","doc","get","userDoc","exists","Error","displayLocation","city","state","country","phoneNumber","initNotifications","jobs","push","text","email","chat","newUser","joinedTime","unix","joinedDate","format","notifications","locationKey","customerId","set","merge","firstName","lastName","req","res","body","status","json","send","console","log","Sentry","captureException"],"mappings":"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","sourcesContent":["import { firestore } from \"../../firebase\";\nimport admin from \"firebase-admin\";\nimport moment from \"moment\";\nimport { NewStudent, Student, NewHirer, Hirer } from \"../../schemas/User\";\nimport * as Sentry from \"@sentry/node\";\nimport slack from \"../../utils/slack\";\nimport { purePhone } from \"../../utils/formatPhone\";\nimport matchReferral from \"../refer/matchReferral\";\n\nexport async function createUser(\n  uid: string,\n  data: NewStudent,\n  type: \"student\"\n): Promise<Student>;\nexport async function createUser(\n  uid: string,\n  data: NewHirer,\n  type: \"hirer\"\n): Promise<Hirer>;\nexport async function createUser(\n  uid: string,\n  data: NewStudent | NewHirer,\n  type: \"student\" | \"hirer\"\n) {\n  // get user doc\n  const userDoc = await firestore\n    .collection(\"users\")\n    .doc(uid)\n    .get();\n  if (userDoc.exists) {\n    throw new Error(\"User already exists\");\n  }\n\n  const displayLocation = `${data.city}${data.state ? `, ${data.state}` : \"\"}${\n    !data.state && data.country ? `, ${data.country}` : \"\"\n  }`;\n\n  const phoneNumber = purePhone(data.phoneNumber);\n\n  // construct and set user data\n  let newUser: any;\n  if (data.type == \"student\") {\n    const initNotifications = {\n      jobs: {\n        push: true,\n        text: true,\n        email: true\n      },\n      chat: {\n        push: true,\n        text: true,\n        email: false\n      }\n    };\n    newUser = {\n      ...data,\n      displayLocation,\n      joinedTime: moment().unix(),\n      joinedDate: moment().format(),\n      jobs: {},\n      notifications: initNotifications,\n      locationKey: null,\n      phoneNumber\n    } as Student;\n  } else {\n    const initNotifications = {\n      jobs: {\n        push: true,\n        text: true,\n        email: true\n      },\n      chat: {\n        push: true,\n        text: true,\n        email: false\n      }\n    };\n    newUser = {\n      ...data,\n      displayLocation,\n      joinedTime: moment().unix(),\n      joinedDate: moment().format(),\n      customerId: null,\n      locationKey: null,\n      notifications: initNotifications\n    } as Hirer;\n  }\n\n  await firestore\n    .collection(\"users\")\n    .doc(uid)\n    .set(newUser, { merge: true });\n\n  // log signup\n  slack(\n    `*Signup* ${newUser.type} in ${newUser.city} in ${\n      newUser.displayLocation\n    } _${newUser.firstName} ${newUser.lastName} ${\n      newUser.email\n    } ${phoneNumber}_`\n  );\n\n  // capture referral\n  await matchReferral(uid, newUser);\n\n  return newUser;\n}\n\nexport default async (req: any, res: any) => {\n  try {\n    const {\n      uid,\n      data\n    }: { uid: string; data: NewStudent | NewHirer } = req.body;\n\n    const newUser =\n      data.type == \"student\"\n        ? await createUser(uid, data, \"student\")\n        : await createUser(uid, data, \"hirer\");\n\n    // successful signup\n    res.status(200).json({\n      data: newUser\n    });\n\n    // success\n  } catch (error) {\n    res.status(500).send(\"Something broke!\");\n    console.log(\"Error: \" + error);\n    Sentry.captureException(error);\n  }\n};\n"],"file":"createUser.js"}