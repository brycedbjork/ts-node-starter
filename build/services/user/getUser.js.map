{"version":3,"sources":["../../../src/services/user/getUser.ts"],"names":["getUser","id","type","firestore","collection","doc","get","userDoc","exists","Error","data","req","res","params","userData","status","json","send","console","log","Sentry","captureException"],"mappings":";;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;SAMsBA,O;;;;;;;0BAAf,kBAAuBC,EAAvB,EAAgCC,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEiBC,oBACnBC,UADmB,CACR,OADQ,EAEnBC,GAFmB,CAEfJ,EAFe,EAGnBK,GAHmB,EAFjB;;AAAA;AAECC,YAAAA,OAFD;;AAAA,gBAMAA,OAAO,CAACC,MANR;AAAA;AAAA;AAAA;;AAAA,kBAOG,IAAIC,KAAJ,CAAU,qBAAV,CAPH;;AAAA;AAUCC,YAAAA,IAVD,qBAWAH,OAAO,CAACG,IAAR,EAXA;AAYHT,cAAAA,EAAE,EAAFA;AAZG;AAAA,2BAeGC,IAfH;AAAA,8CAgBE,SAhBF,wBAmBE,OAnBF;AAAA;;AAAA;AAAA,8CAiBeQ,IAjBf;;AAAA;AAAA,8CAoBaA,IApBb;;AAAA;AAAA,8CAuBuBA,IAvBvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;;;;;;0BA2BQ,iBAAOC,GAAP,EAAiBC,GAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEHX,YAAAA,GAFG,GAEoBU,GAAG,CAACE,MAFxB,CAEHZ,EAFG;AAAA;AAAA,mBAIYD,OAAO,CAACC,GAAD,EAAK,IAAL,CAJnB;;AAAA;AAILa,YAAAA,QAJK;AAAA,6CAQJF,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,QAArB,CARI;;AAAA;AAAA;AAAA;AAYXF,YAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB,kBAArB;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAC,YAAAA,MAAM,CAACC,gBAAP;;AAdW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { firestore } from \"../../firebase\";\nimport * as Sentry from \"@sentry/node\";\nimport { Student, Hirer } from \"../../schemas/User\";\n\nexport async function getUser(id: string, type: \"student\"): Promise<Student>;\nexport async function getUser(id: string, type: \"hirer\"): Promise<Hirer>;\nexport async function getUser(id: string, type: null): Promise<Student | Hirer>;\nexport async function getUser(id: any, type: any): Promise<any> {\n  // get user entity\n  const userDoc = await firestore\n    .collection(\"users\")\n    .doc(id)\n    .get();\n  if (!userDoc.exists) {\n    throw new Error(\"User does not exist\");\n  }\n\n  const data = {\n    ...userDoc.data(),\n    id\n  };\n\n  switch (type) {\n    case \"student\":\n      return <Student>data;\n\n    case \"hirer\":\n      return <Hirer>data;\n\n    default:\n      return <Student | Hirer>data;\n  }\n}\n\nexport default async (req: any, res: any) => {\n  try {\n    const { id }: { id: string } = req.params;\n\n    const userData = await getUser(id, null);\n\n    // TODO: filter data sent to client\n\n    return res.status(200).json(userData);\n\n    // success\n  } catch (error) {\n    res.status(500).send(\"Something broke!\");\n    console.log(\"Error: \" + error);\n    Sentry.captureException(error);\n  }\n};\n"],"file":"getUser.js"}