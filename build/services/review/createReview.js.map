{"version":3,"sources":["../../../src/services/review/createReview.ts"],"names":["createReview","uid","forUser","review","rating","jobType","jobId","reviewingUser","reviewedUser","jobObj","type","id","newReview","by","firstName","image","user","date","format","time","unix","job","firestore","collection","add","addedReview","reviewData","req","res","body","status","json","send","console","log","Sentry","captureException"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;;;AAGO,IAAMA,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,iBAC1BC,GAD0B,EAE1BC,OAF0B,EAG1BC,MAH0B,EAI1BC,MAJ0B,EAK1BC,OAL0B,EAM1BC,KAN0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBASE,sBAAQL,GAAR,EAAa,OAAb,CATF;;AAAA;AASpBM,YAAAA,aAToB;AAAA;AAAA,mBAUC,sBAAQL,OAAR,EAAiB,SAAjB,CAVD;;AAAA;AAUpBM,YAAAA,YAVoB;AAY1B;AACIC,YAAAA,MAbsB,GAaR;AAChBC,cAAAA,IAAI,EAAEL;AADU,aAbQ;AAgB1B,gBAAIC,KAAJ,EAAWG,MAAM,CAACE,EAAP,GAAYL,KAAZ;AACLM,YAAAA,SAjBoB,GAiBA;AACxBC,cAAAA,EAAE,EAAE;AACFF,gBAAAA,EAAE,EAAEV,GADF;AAEFa,gBAAAA,SAAS,EAAEP,aAAa,CAACO,SAFvB;AAGFC,gBAAAA,KAAK,EAAER,aAAa,CAACQ;AAHnB,eADoB;AAMxBC,cAAAA,IAAI,EAAE;AACJL,gBAAAA,EAAE,EAAET,OADA;AAEJY,gBAAAA,SAAS,EAAEN,YAAY,CAACM,SAFpB;AAGJC,gBAAAA,KAAK,EAAEP,YAAY,CAACO;AAHhB,eANkB;AAWxBE,cAAAA,IAAI,EAAE,0BAASC,MAAT,EAXkB;AAYxBC,cAAAA,IAAI,EAAE,0BAASC,IAAT,EAZkB;AAaxBhB,cAAAA,MAAM,EAANA,MAbwB;AAcxBD,cAAAA,MAAM,EAANA,MAdwB;AAexBkB,cAAAA,GAAG,EAAEZ;AAfmB,aAjBA,EAmC1B;;AAnC0B;AAAA,mBAoCAa,oBAAUC,UAAV,CAAqB,SAArB,EAAgCC,GAAhC,CAAoCZ,SAApC,CApCA;;AAAA;AAoCpBa,YAAAA,WApCoB;AAAA,6CAqCnB;AACLd,cAAAA,EAAE,EAAEc,WAAW,CAACd,EADX;AAELe,cAAAA,UAAU,EAAEd;AAFP,aArCmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZZ,YAAY;AAAA;AAAA;AAAA,GAAlB;;;;;;;;;0BA2CQ,kBAAO2B,GAAP,EAAiBC,GAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAgBPD,GAAG,CAACE,IAhBG,EAGT5B,GAHS,aAGTA,GAHS,EAITC,OAJS,aAITA,OAJS,EAKTI,KALS,aAKTA,KALS,EAMTD,OANS,aAMTA,OANS,EAOTF,MAPS,aAOTA,MAPS,EAQTC,MARS,aAQTA,MARS;AAAA;AAAA,mBAqBmCJ,YAAY,CACxDC,GADwD,EAExDC,OAFwD,EAGxDC,MAHwD,EAIxDC,MAJwD,EAKxDC,OALwD,EAMxDC,KANwD,CArB/C;;AAAA;AAAA;AAmBTK,YAAAA,EAnBS,SAmBTA,EAnBS;AAoBTe,YAAAA,UApBS,SAoBTA,UApBS;AA8BX;AACAE,YAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBpB,cAAAA,EAAE,EAAFA,EADmB;AAEnBR,cAAAA,MAAM,EAAEuB;AAFW,aAArB;AA/BW;AAAA;;AAAA;AAAA;AAAA;AAoCXE,YAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBE,IAAhB;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAC,YAAAA,MAAM,CAACC,gBAAP;;AAtCW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { firestore } from \"../../firebase\";\nimport moment from \"moment\";\nimport * as Sentry from \"@sentry/node\";\nimport { Review } from \"../../schemas/Review\";\nimport { getUser } from \"../user/getUser\";\nimport { getJob } from \"../job/getJob\";\n\nexport const createReview = async (\n  uid: string,\n  forUser: string,\n  review: string,\n  rating: number,\n  jobType: string,\n  jobId?: string\n) => {\n  // get user docs\n  const reviewingUser = await getUser(uid, \"hirer\");\n  const reviewedUser = await getUser(forUser, \"student\");\n\n  // construct review\n  let jobObj: any = {\n    type: jobType\n  };\n  if (jobId) jobObj.id = jobId;\n  const newReview: Review = {\n    by: {\n      id: uid,\n      firstName: reviewingUser.firstName,\n      image: reviewingUser.image\n    },\n    user: {\n      id: forUser,\n      firstName: reviewedUser.firstName,\n      image: reviewedUser.image\n    },\n    date: moment().format(),\n    time: moment().unix(),\n    rating,\n    review,\n    job: jobObj\n  };\n\n  // add review\n  const addedReview = await firestore.collection(\"reviews\").add(newReview);\n  return {\n    id: addedReview.id,\n    reviewData: newReview\n  };\n};\n\nexport default async (req: any, res: any) => {\n  try {\n    const {\n      uid,\n      forUser,\n      jobId,\n      jobType,\n      review,\n      rating\n    }: {\n      uid: string;\n      forUser: string;\n      jobId: string;\n      jobType: string;\n      review: string;\n      rating: number;\n    } = req.body;\n\n    const {\n      id,\n      reviewData\n    }: { id: string; reviewData: Review } = await createReview(\n      uid,\n      forUser,\n      review,\n      rating,\n      jobType,\n      jobId\n    );\n\n    // successful post\n    res.status(200).json({\n      id,\n      review: reviewData\n    });\n  } catch (error) {\n    res.status(500).send(error);\n    console.log(\"Error: \" + error);\n    Sentry.captureException(error);\n  }\n};\n"],"file":"createReview.js"}