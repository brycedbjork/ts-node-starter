{"version":3,"sources":["../../../src/services/chat/createChat.ts"],"names":["createChat","uid","otherUser","jobId","primaryUser","secondaryUser","jobObj","job","jobData","hirer","type","id","firstName","image","users","active","newChat","createdTime","unix","createdDate","format","lastMessage","text","time","date","readBy","firestore","collection","add","addedChat","chat","req","res","body","status","json","send","console","log","Sentry","captureException"],"mappings":"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","sourcesContent":["import { firestore } from \"../../firebase\";\nimport moment from \"moment\";\nimport * as Sentry from \"@sentry/node\";\nimport { Chat } from \"../../schemas/Chat\";\nimport { getUser } from \"../user/getUser\";\nimport { getJob } from \"../job/getJob\";\nimport { Student, Hirer } from \"../../schemas/User\";\n\nexport const createChat = async (\n  uid: string,\n  otherUser: string,\n  jobId?: string\n) => {\n  // get user docs\n  const primaryUser = await getUser(uid, null);\n  const secondaryUser = await getUser(otherUser, null);\n\n  // get job\n  let jobObj: any = { job: null };\n  let jobData: any = {};\n  if (jobId) {\n    jobData = await getJob(jobId);\n    jobObj.job = jobData;\n  }\n\n  // construct chat\n  const hirer =\n    primaryUser.type == \"hirer\"\n      ? {\n          id: uid,\n          firstName: primaryUser.firstName,\n          image: primaryUser.image\n        }\n      : {\n          id: otherUser,\n          firstName: secondaryUser.firstName,\n          image: secondaryUser.image\n        };\n  const users = {\n    [primaryUser.type == \"hirer\" ? otherUser : uid]: {\n      active: true,\n      firstName:\n        primaryUser.type == \"hirer\"\n          ? secondaryUser.firstName\n          : primaryUser.firstName,\n      image:\n        primaryUser.type == \"hirer\" ? secondaryUser.image : primaryUser.image\n    }\n  };\n\n  const newChat: Chat = {\n    active: true,\n    createdTime: moment().unix(),\n    createdDate: moment().format(),\n    hirer,\n    users,\n    lastMessage: {\n      type: \"activity\",\n      text: `Connected to complete ${jobId ? `${jobData.type} job` : \"job\"}`,\n      time: moment().unix(),\n      date: moment().format()\n    },\n    readBy: {\n      [uid]: false,\n      [otherUser]: false\n    },\n    ...jobObj\n  };\n  const addedChat = await firestore.collection(\"chats\").add(newChat);\n\n  return {\n    id: addedChat.id,\n    chat: newChat\n  };\n};\n\nexport default async (req: any, res: any) => {\n  try {\n    const {\n      uid,\n      otherUser,\n      jobId\n    }: { uid: string; otherUser: string; jobId: string } = req.body;\n\n    const { id, chat }: { id: string; chat: Chat } = await createChat(\n      uid,\n      otherUser,\n      jobId\n    );\n\n    // successful post\n    res.status(200).json({\n      id,\n      chat\n    });\n  } catch (error) {\n    res.status(500).send(error);\n    console.log(\"Error: \" + error);\n    Sentry.captureException(error);\n  }\n};\n"],"file":"createChat.js"}