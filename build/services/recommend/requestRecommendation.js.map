{"version":3,"sources":["../../../src/services/recommend/requestRecommendation.ts"],"names":["requestRecommendation","uid","from","message","requestingUser","newRecommendationRequest","user","id","firstName","image","date","format","time","unix","firestore","collection","add","addedRecommendationRequest","recommendationRequest","req","res","body","status","json","recommendation","send","console","log","Sentry","captureException"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;AAEO,IAAMA,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,iBACnCC,GADmC,EAEnCC,IAFmC,EAGnCC,OAHmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAMN,sBAAQF,GAAR,EAAa,SAAb,CANM;;AAAA;AAM7BG,YAAAA,cAN6B;AAQnC;AACMC,YAAAA,wBAT6B,GASqB;AACtDC,cAAAA,IAAI,EAAE;AACJC,gBAAAA,EAAE,EAAEN,GADA;AAEJO,gBAAAA,SAAS,EAAEJ,cAAc,CAACI,SAFtB;AAGJC,gBAAAA,KAAK,EAAEL,cAAc,CAACK;AAHlB,eADgD;AAMtDP,cAAAA,IAAI,EAAJA,IANsD;AAOtDQ,cAAAA,IAAI,EAAE,0BAASC,MAAT,EAPgD;AAQtDC,cAAAA,IAAI,EAAE,0BAASC,IAAT,EARgD;AAStDV,cAAAA,OAAO,EAAPA;AATsD,aATrB;AAAA;AAAA,mBAqBMW,oBACtCC,UADsC,CAC3B,wBAD2B,EAEtCC,GAFsC,CAElCX,wBAFkC,CArBN;;AAAA;AAqB7BY,YAAAA,0BArB6B;AAAA;AAAA,mBA0B7B,qDACJA,0BAA0B,CAACV,EADvB,EAEJF,wBAFI,EAGJD,cAHI,CA1B6B;;AAAA;AAAA,6CAgC5B;AACLG,cAAAA,EAAE,EAAEU,0BAA0B,CAACV,EAD1B;AAELW,cAAAA,qBAAqB,EAAEb;AAFlB,aAhC4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAArBL,qBAAqB;AAAA;AAAA;AAAA,GAA3B;;;;;;;;;0BAsCQ,kBAAOmB,GAAP,EAAiBC,GAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAcPD,GAAG,CAACE,IAdG,EAGTpB,GAHS,aAGTA,GAHS,EAITC,IAJS,aAITA,IAJS,EAKTC,OALS,aAKTA,OALS;AAAA;AAAA,mBAsBDH,qBAAqB,CAACC,GAAD,EAAMC,IAAN,EAAYC,OAAZ,CAtBpB;;AAAA;AAAA;AAiBTI,YAAAA,EAjBS,SAiBTA,EAjBS;AAkBTW,YAAAA,qBAlBS,SAkBTA,qBAlBS;AAwBX;AACAE,YAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBhB,cAAAA,EAAE,EAAFA,EADmB;AAEnBiB,cAAAA,cAAc,EAAEN;AAFG,aAArB;AAzBW;AAAA;;AAAA;AAAA;AAAA;AA8BXE,YAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBG,IAAhB;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAC,YAAAA,MAAM,CAACC,gBAAP;;AAhCW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { firestore } from \"../../firebase\";\nimport moment from \"moment\";\nimport * as Sentry from \"@sentry/node\";\nimport { RecommendationRequest } from \"../../schemas/Recommend\";\nimport { getUser } from \"../user/getUser\";\nimport requestRecommendationNotification from \"../notification/requestedRecommendationNotification\";\n\nexport const requestRecommendation = async (\n  uid: string,\n  from: { name: string; email: string; phoneNumber: string },\n  message: string\n) => {\n  // get user docs\n  const requestingUser = await getUser(uid, \"student\");\n\n  // construct recommendation\n  const newRecommendationRequest: RecommendationRequest = {\n    user: {\n      id: uid,\n      firstName: requestingUser.firstName,\n      image: requestingUser.image\n    },\n    from,\n    date: moment().format(),\n    time: moment().unix(),\n    message\n  };\n\n  const addedRecommendationRequest = await firestore\n    .collection(\"recommendationRequests\")\n    .add(newRecommendationRequest);\n\n  // notify requested person\n  await requestRecommendationNotification(\n    addedRecommendationRequest.id,\n    newRecommendationRequest,\n    requestingUser\n  );\n\n  return {\n    id: addedRecommendationRequest.id,\n    recommendationRequest: newRecommendationRequest\n  };\n};\n\nexport default async (req: any, res: any) => {\n  try {\n    const {\n      uid,\n      from,\n      message\n    }: {\n      uid: string;\n      from: {\n        name: string;\n        email: string;\n        phoneNumber: string;\n      };\n      message: string;\n    } = req.body;\n\n    const {\n      id,\n      recommendationRequest\n    }: {\n      id: string;\n      recommendationRequest: RecommendationRequest;\n    } = await requestRecommendation(uid, from, message);\n\n    // successful post\n    res.status(200).json({\n      id,\n      recommendation: recommendationRequest\n    });\n  } catch (error) {\n    res.status(500).send(error);\n    console.log(\"Error: \" + error);\n    Sentry.captureException(error);\n  }\n};\n"],"file":"requestRecommendation.js"}