{"version":3,"sources":["../../../src/services/recommend/addRecommendation.ts"],"names":["addRecommendation","uid","forUser","recommendingUser","recommendedUser","newRecommendation","by","id","firstName","image","user","date","format","time","unix","firestore","collection","add","addedRecommendation","recommendation","req","res","body","status","json","send","console","log","Sentry","captureException"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;;;AAEO,IAAMA,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,iBAAOC,GAAP,EAAoBC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEA,sBAAQD,GAAR,EAAa,OAAb,CAFA;;AAAA;AAEzBE,YAAAA,gBAFyB;AAAA;AAAA,mBAGD,sBAAQD,OAAR,EAAiB,SAAjB,CAHC;;AAAA;AAGzBE,YAAAA,eAHyB;AAK/B;AACMC,YAAAA,iBANyB,GAMW;AACxCC,cAAAA,EAAE,EAAE;AACFC,gBAAAA,EAAE,EAAEN,GADF;AAEFO,gBAAAA,SAAS,EAAEL,gBAAgB,CAACK,SAF1B;AAGFC,gBAAAA,KAAK,EAAEN,gBAAgB,CAACM;AAHtB,eADoC;AAMxCC,cAAAA,IAAI,EAAE;AACJH,gBAAAA,EAAE,EAAEL,OADA;AAEJM,gBAAAA,SAAS,EAAEJ,eAAe,CAACI,SAFvB;AAGJC,gBAAAA,KAAK,EAAEL,eAAe,CAACK;AAHnB,eANkC;AAWxCE,cAAAA,IAAI,EAAE,0BAASC,MAAT,EAXkC;AAYxCC,cAAAA,IAAI,EAAE,0BAASC,IAAT;AAZkC,aANX;AAAA;AAAA,mBAqBGC,oBAC/BC,UAD+B,CACpB,iBADoB,EAE/BC,GAF+B,CAE3BZ,iBAF2B,CArBH;;AAAA;AAqBzBa,YAAAA,mBArByB;AAAA,6CAwBxB;AACLX,cAAAA,EAAE,EAAEW,mBAAmB,CAACX,EADnB;AAELY,cAAAA,cAAc,EAAEd;AAFX,aAxBwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBL,iBAAiB;AAAA;AAAA;AAAA,GAAvB;;;;;;;;;0BA8BQ,kBAAOoB,GAAP,EAAiBC,GAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAQPD,GAAG,CAACE,IARG,EAGTrB,GAHS,aAGTA,GAHS,EAITC,OAJS,aAITA,OAJS;AAAA;AAAA,mBAa+CF,iBAAiB,CACzEC,GADyE,EAEzEC,OAFyE,CAbhE;;AAAA;AAAA;AAWTK,YAAAA,EAXS,SAWTA,EAXS;AAYTY,YAAAA,cAZS,SAYTA,cAZS;AAkBX;AACAE,YAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBjB,cAAAA,EAAE,EAAFA,EADmB;AAEnBY,cAAAA,cAAc,EAAEA;AAFG,aAArB;AAnBW;AAAA;;AAAA;AAAA;AAAA;AAwBXE,YAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBE,IAAhB;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAC,YAAAA,MAAM,CAACC,gBAAP;;AA1BW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { firestore } from \"../../firebase\";\nimport moment from \"moment\";\nimport * as Sentry from \"@sentry/node\";\nimport { Recommendation } from \"../../schemas/Recommend\";\nimport { getUser } from \"../user/getUser\";\n\nexport const addRecommendation = async (uid: string, forUser: string) => {\n  // get user docs\n  const recommendingUser = await getUser(uid, \"hirer\");\n  const recommendedUser = await getUser(forUser, \"student\");\n\n  // construct recommendation\n  const newRecommendation: Recommendation = {\n    by: {\n      id: uid,\n      firstName: recommendingUser.firstName,\n      image: recommendingUser.image\n    },\n    user: {\n      id: forUser,\n      firstName: recommendedUser.firstName,\n      image: recommendedUser.image\n    },\n    date: moment().format(),\n    time: moment().unix()\n  };\n\n  const addedRecommendation = await firestore\n    .collection(\"recommendations\")\n    .add(newRecommendation);\n  return {\n    id: addedRecommendation.id,\n    recommendation: newRecommendation\n  };\n};\n\nexport default async (req: any, res: any) => {\n  try {\n    const {\n      uid,\n      forUser\n    }: {\n      uid: string;\n      forUser: string;\n    } = req.body;\n\n    const {\n      id,\n      recommendation\n    }: { id: string; recommendation: Recommendation } = await addRecommendation(\n      uid,\n      forUser\n    );\n\n    // successful post\n    res.status(200).json({\n      id,\n      recommendation: recommendation\n    });\n  } catch (error) {\n    res.status(500).send(error);\n    console.log(\"Error: \" + error);\n    Sentry.captureException(error);\n  }\n};\n"],"file":"addRecommendation.js"}