{"version":3,"sources":["../../../src/services/job/createJob.ts"],"names":["geoFirestore","GeoFirestore","firestore","geoJobLocations","collection","createJob","uid","data","userEntity","displayLocation","city","state","country","newJob","active","postedTime","unix","postedDate","format","hirer","id","firstName","image","matchedUsers","status","locationKey","add","postedJob","Error","coordinates","latitude","longitude","type","admin","GeoPoint","indexedLocation","doc","update","description","job","req","res","body","json","send","console","log","Sentry","captureException"],"mappings":"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","sourcesContent":["import { firestore, messaging } from \"../../firebase\";\nimport admin from \"firebase-admin\";\nimport {\n  GeoFirestore,\n  GeoCollectionReference,\n  GeoDocumentReference,\n  GeoQuery,\n  GeoQuerySnapshot\n} from \"geofirestore\";\nimport moment from \"moment\";\nimport { JobPost, Job } from \"../../schemas/Job\";\nimport * as Sentry from \"@sentry/node\";\nimport slack from \"../../utils/slack\";\nimport { Hirer } from \"../../schemas/User\";\nimport jobNotification from \"../notification/jobNotification\";\nimport jobInviteNotification from \"../notification/jobInviteNotification\";\nimport { getUser } from \"../user/getUser\";\n\nlet geoFirestore = new GeoFirestore(firestore);\nconst geoJobLocations: GeoCollectionReference = geoFirestore.collection(\n  \"jobLocations\"\n);\n\nexport const createJob = async (uid: string, data: JobPost) => {\n  const userEntity = await getUser(uid, null);\n\n  // TODO: get display location from job's lat lng\n  const displayLocation = `${userEntity.city}${\n    userEntity.state ? `, ${userEntity.state}` : \"\"\n  }${!userEntity.state && userEntity.country ? `, ${userEntity.country}` : \"\"}`;\n\n  // construct and post job\n  const newJob: Job = {\n    ...data,\n    active: true,\n    postedTime: moment().unix(),\n    postedDate: moment().format(),\n    hirer: {\n      id: uid,\n      firstName: userEntity.firstName,\n      image: userEntity.image\n    },\n    matchedUsers: {},\n    displayLocation,\n    status: \"searching\",\n    locationKey: null\n  };\n  const postedJob: admin.firestore.DocumentReference = await firestore\n    .collection(\"jobs\")\n    .add(newJob);\n  if (!postedJob) {\n    throw new Error(\"Could not post job\");\n  }\n\n  // make coordinates searchable with geofire\n  const { latitude, longitude } = newJob.coordinates;\n  const indexedLocation: GeoDocumentReference = await geoJobLocations.add({\n    id: postedJob.id,\n    type: newJob.type,\n    coordinates: new admin.firestore.GeoPoint(latitude, longitude)\n  });\n  if (!indexedLocation) {\n    throw new Error(\"Could not index location\");\n  }\n\n  // add indexedLocation to job entity\n  await firestore\n    .collection(\"jobs\")\n    .doc(postedJob.id)\n    .update({\n      locationKey: indexedLocation.id\n    });\n\n  // log job post\n  slack(\n    `*Job Post* ${newJob.type} for ${newJob.hirer.firstName} in ${\n      newJob.displayLocation\n    } _${newJob.description}_`\n  );\n\n  return {\n    id: postedJob.id,\n    job: newJob\n  };\n};\n\nexport default async (req: any, res: any) => {\n  try {\n    const { uid, data }: { uid: string; data: JobPost } = req.body;\n\n    const { id, job }: { id: string; job: Job } = await createJob(uid, data);\n\n    // successful post\n    res.status(200).json({\n      id: id,\n      data: job\n    });\n\n    if (data.type != \"test\") {\n      await jobNotification(id, job);\n      await jobInviteNotification(id, job);\n    }\n\n    return;\n  } catch (error) {\n    res.status(500).send(error);\n    console.log(\"Error: \" + error);\n    Sentry.captureException(error);\n  }\n};\n"],"file":"createJob.js"}