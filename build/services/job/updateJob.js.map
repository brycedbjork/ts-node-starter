{"version":3,"sources":["../../../src/services/job/updateJob.ts"],"names":["updateJob","jobId","data","firestore","collection","doc","get","jobDoc","exists","Error","update","job","req","res","body","status","json","send","console","log","Sentry","captureException"],"mappings":";;;;;;;AAAA;;AAEA;;;;;;;;AAEO,IAAMA,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,iBAAOC,KAAP,EAAsBC,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEFC,oBAClBC,UADkB,CACP,MADO,EAElBC,GAFkB,CAEdJ,KAFc,EAGlBK,GAHkB,EAFE;;AAAA;AAEjBC,YAAAA,MAFiB;;AAAA,gBAMlBA,MAAM,CAACC,MANW;AAAA;AAAA;AAAA;;AAAA,kBAOf,IAAIC,KAAJ,CAAU,oBAAV,CAPe;;AAAA;AAAA;AAAA,mBAUjBN,oBACHC,UADG,CACQ,MADR,EAEHC,GAFG,CAECJ,KAFD,EAGHS,MAHG,CAGIR,IAHJ,CAViB;;AAAA;AAAA;AAAA,mBAeLC,oBACfC,UADe,CACJ,MADI,EAEfC,GAFe,CAEXJ,KAFW,EAGfK,GAHe,EAfK;;AAAA;AAejBK,YAAAA,GAfiB;AAAA,6CAmBhBA,GAAG,CAACT,IAAJ,EAnBgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATF,SAAS;AAAA;AAAA;AAAA,GAAf;;;;;;;;;0BAsBQ,kBAAOY,GAAP,EAAiBC,GAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAE8CD,GAAG,CAACE,IAFlD,EAEHb,KAFG,aAEHA,KAFG,EAEIC,IAFJ,aAEIA,IAFJ;AAAA;AAAA,mBAIOF,SAAS,CAACC,KAAD,EAAQC,IAAR,CAJhB;;AAAA;AAILS,YAAAA,GAJK;AAAA,8CAMJE,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBL,GAArB,CANI;;AAAA;AAAA;AAAA;AAUXE,YAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB,kBAArB;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAC,YAAAA,MAAM,CAACC,gBAAP;;AAZW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { auth, firestore, messaging } from \"../../firebase\";\nimport { Job } from \"../../schemas/Job\";\nimport * as Sentry from \"@sentry/node\";\n\nexport const updateJob = async (jobId: string, data: object) => {\n  // get job entity\n  const jobDoc = await firestore\n    .collection(\"jobs\")\n    .doc(jobId)\n    .get();\n  if (!jobDoc.exists) {\n    throw new Error(\"Job does not exist\");\n  }\n\n  await firestore\n    .collection(\"jobs\")\n    .doc(jobId)\n    .update(data);\n\n  const job = await firestore\n    .collection(\"jobs\")\n    .doc(jobId)\n    .get();\n  return job.data() as Job;\n};\n\nexport default async (req: any, res: any) => {\n  try {\n    const { jobId, data }: { jobId: string; data: object } = req.body;\n\n    const job = await updateJob(jobId, data);\n\n    return res.status(200).json(job);\n\n    // success\n  } catch (error) {\n    res.status(500).send(\"Something broke!\");\n    console.log(\"Error: \" + error);\n    Sentry.captureException(error);\n  }\n};\n"],"file":"updateJob.js"}