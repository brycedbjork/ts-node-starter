{"version":3,"sources":["../../../src/services/job/deleteJob.ts"],"names":["geoFirestore","GeoFirestore","firestore","geoJobLocations","collection","deleteJob","jobId","doc","get","jobDoc","exists","Error","jobEntity","data","locationKey","req","res","body","status","send","console","log","Sentry","captureException"],"mappings":";;;;;;;AAAA;;AAEA;;AAQA;;;;;;;;AAKA,IAAIA,YAAY,GAAG,IAAIC,0BAAJ,CAAiBC,mBAAjB,CAAnB;AACA,IAAMC,eAAuC,GAAGH,YAAY,CAACI,UAAb,CAC9C,cAD8C,CAAhD;;AAIA,IAAMC,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,iBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEKJ,oBAClBE,UADkB,CACP,MADO,EAElBG,GAFkB,CAEdD,KAFc,EAGlBE,GAHkB,EAFL;;AAAA;AAEVC,YAAAA,MAFU;;AAAA,gBAMXA,MAAM,CAACC,MANI;AAAA;AAAA;AAAA;;AAAA,kBAOR,IAAIC,KAAJ,CAAU,oBAAV,CAPQ;;AAAA;AAUhB;AACMC,YAAAA,SAXU,GAWEH,MAAM,CAACI,IAAP,EAXF;;AAAA,iBAYZD,SAAS,CAACE,WAZE;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAaRX,eAAe,CAACI,GAAhB,CAAoBK,SAAS,CAACE,WAA9B,aAbQ;;AAAA;AAAA;AAAA,mBAiBVZ,oBACHE,UADG,CACQ,MADR,EAEHG,GAFG,CAECD,KAFD,aAjBU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATD,SAAS;AAAA;AAAA;AAAA,GAAf;;;;;;;0BAuBe,kBAAOU,GAAP,EAAiBC,GAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEHV,YAAAA,KAFG,GAE0BS,GAAG,CAACE,IAF9B,CAEHX,KAFG;AAAA;AAAA,mBAILD,SAAS,CAACC,KAAD,CAJJ;;AAAA;AAAA,8CAMJU,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,EANI;;AAAA;AAAA;AAAA;AAYXH,YAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,kBAArB;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAC,YAAAA,MAAM,CAACC,gBAAP;;AAdW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { auth, firestore, messaging } from \"../../firebase\";\nimport admin from \"firebase-admin\";\nimport {\n  GeoFirestore,\n  GeoCollectionReference,\n  GeoDocumentReference,\n  GeoQuery,\n  GeoQuerySnapshot\n} from \"geofirestore\";\nimport moment from \"moment\";\nimport * as Sentry from \"@sentry/node\";\nimport { Job } from \"../../schemas/Job\";\nimport slack from \"../../utils/slack\";\nimport authenticate from \"../../utils/authenticate\";\n\nlet geoFirestore = new GeoFirestore(firestore);\nconst geoJobLocations: GeoCollectionReference = geoFirestore.collection(\n  \"jobLocations\"\n);\n\nconst deleteJob = async (jobId: string) => {\n  // get job entity\n  const jobDoc = await firestore\n    .collection(\"jobs\")\n    .doc(jobId)\n    .get();\n  if (!jobDoc.exists) {\n    throw new Error(\"Job does not exist\");\n  }\n\n  // delete location key\n  const jobEntity = jobDoc.data() as Job;\n  if (jobEntity.locationKey) {\n    await geoJobLocations.doc(jobEntity.locationKey).delete();\n  }\n\n  // delete job itself\n  await firestore\n    .collection(\"jobs\")\n    .doc(jobId)\n    .delete();\n};\n\nexport default async (req: any, res: any) => {\n  try {\n    const { jobId }: { jobId: string } = req.body;\n\n    await deleteJob(jobId);\n\n    return res.status(200).send();\n\n    // TODO: notify matched students?\n\n    // success\n  } catch (error) {\n    res.status(500).send(\"Something broke!\");\n    console.log(\"Error: \" + error);\n    Sentry.captureException(error);\n  }\n};\n"],"file":"deleteJob.js"}