{"version":3,"sources":["../../../src/services/refer/addReferral.ts"],"names":["addReferral","type","phoneNumber","uid","name","email","firestore","collection","where","get","check","empty","userData","newReferral","user","id","firstName","lastName","image","time","unix","date","format","add","req","res","body","status","send","console","log","Sentry","captureException"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;AAEO,IAAMA,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,iBACzBC,IADyB,EAEzBC,WAFyB,EAGzBC,GAHyB,EAIzBC,IAJyB,EAKzBC,KALyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAQLC,oBACjBC,UADiB,CACN,OADM,EAEjBC,KAFiB,CAEX,aAFW,EAEI,IAFJ,EAEU,4BAAUN,WAAV,CAFV,EAGjBO,GAHiB,EARK;;AAAA;AAQnBC,YAAAA,KARmB;;AAAA,kBAYrB,CAACA,KAAK,CAACC,KAAP,IAAgBV,IAAI,IAAI,QAZH;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,iBAmBrBE,GAnBqB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAoBN,sBAAQA,GAAR,EAAa,IAAb,CApBM;;AAAA;AAoBvBS,YAAAA,QApBuB;;AAAA;AAAA,0BAyBjBX,IAzBiB;AAAA,4CA0BlB,KA1BkB,wBAyClB,QAzCkB;AAAA;;AAAA;AA2BrB,gBAAIE,GAAJ,EAAS;AACPU,cAAAA,WAAW,CAACC,IAAZ,GAAmB;AACjBC,gBAAAA,EAAE,EAAEZ,GADa;AAEjBa,gBAAAA,SAAS,EAAEJ,QAAQ,CAACI,SAFH;AAGjBC,gBAAAA,QAAQ,EAAEL,QAAQ,CAACK,QAHF;AAIjBC,gBAAAA,KAAK,EAAEN,QAAQ,CAACM;AAJC,eAAnB;AAMD;;AACDL,YAAAA,WAAW,CAACX,WAAZ,GAA0B,4BAAUA,WAAV,CAA1B;AACAW,YAAAA,WAAW,CAACM,IAAZ,GAAmB,0BAASC,IAAT,EAAnB;AACAP,YAAAA,WAAW,CAACQ,IAAZ,GAAmB,0BAASC,MAAT,EAAnB;AACAT,YAAAA,WAAW,GAAgBA,WAA3B;AAtCqB;;AAAA;AA0CrB,gBAAIV,GAAJ,EAAS;AACPU,cAAAA,WAAW,CAACC,IAAZ,GAAmB;AACjBC,gBAAAA,EAAE,EAAEZ,GADa;AAEjBa,gBAAAA,SAAS,EAAEJ,QAAQ,CAACI,SAFH;AAGjBC,gBAAAA,QAAQ,EAAEL,QAAQ,CAACK,QAHF;AAIjBC,gBAAAA,KAAK,EAAEN,QAAQ,CAACM;AAJC,eAAnB;AAMD;;AACD,gBAAIL,WAAW,CAACX,WAAhB,EACEW,WAAW,CAACX,WAAZ,GAA0B,4BAAUA,WAAV,CAA1B;AACF,gBAAIW,WAAW,CAACR,KAAhB,EAAuBQ,WAAW,CAACR,KAAZ,GAAoBA,KAApB;AACvB,gBAAIQ,WAAW,CAACT,IAAhB,EAAsBS,WAAW,CAACT,IAAZ,GAAmBA,IAAnB;AACtBS,YAAAA,WAAW,CAACM,IAAZ,GAAmB,0BAASC,IAAT,EAAnB;AACAP,YAAAA,WAAW,CAACQ,IAAZ,GAAmB,0BAASC,MAAT,EAAnB;AACAT,YAAAA,WAAW,GAAmBA,WAA9B;AAxDqB;;AAAA;AAAA;AAAA,mBA6DnBP,oBAAUC,UAAV,CAAqB,WAArB,EAAkCgB,GAAlC,CAAsCV,WAAtC,CA7DmB;;AAAA;AAAA;AAAA,mBAgEnB,sCAAqBA,WAArB,CAhEmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXb,WAAW;AAAA;AAAA;AAAA,GAAjB;;;;;;;;;0BAmEQ,kBAAOwB,GAAP,EAAiBC,GAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAcPD,GAAG,CAACE,IAdG,EAGTvB,GAHS,aAGTA,GAHS,EAITF,IAJS,aAITA,IAJS,EAKTG,IALS,aAKTA,IALS,EAMTF,WANS,aAMTA,WANS,EAOTG,KAPS,aAOTA,KAPS;AAAA;AAAA,mBAgBLL,WAAW,CAACC,IAAD,EAAOC,WAAP,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,KAA/B,CAhBN;;AAAA;AAkBX;AACAoB,YAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;AAnBW;AAAA;;AAAA;AAAA;AAAA;AAqBXH,YAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAC,YAAAA,MAAM,CAACC,gBAAP;;AAvBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { firestore } from \"../../firebase\";\nimport moment from \"moment\";\nimport * as Sentry from \"@sentry/node\";\nimport { WebReferral, DirectReferral } from \"../../schemas/Refer\";\nimport { getUser } from \"../user/getUser\";\nimport referralNotification from \"../notification/referralNotification\";\nimport { purePhone } from \"../../utils/formatPhone\";\n\nexport const addReferral = async (\n  type: \"web\" | \"direct\",\n  phoneNumber: string,\n  uid?: string,\n  name?: string,\n  email?: string\n) => {\n  // check if there is already a user registered with that phone number\n  const check = await firestore\n    .collection(\"users\")\n    .where(\"phoneNumber\", \"==\", purePhone(phoneNumber))\n    .get();\n  if (!check.empty && type == \"direct\") {\n    // user already exists, no need to add direct referral\n    return;\n  }\n\n  // get user doc\n  let userData: any;\n  if (uid) {\n    userData = await getUser(uid, null);\n  }\n\n  // construct referral\n  let newReferral: any;\n  switch (type) {\n    case \"web\":\n      if (uid) {\n        newReferral.user = {\n          id: uid,\n          firstName: userData.firstName,\n          lastName: userData.lastName,\n          image: userData.image\n        };\n      }\n      newReferral.phoneNumber = purePhone(phoneNumber);\n      newReferral.time = moment().unix();\n      newReferral.date = moment().format();\n      newReferral = <WebReferral>newReferral;\n      break;\n\n    case \"direct\":\n      if (uid) {\n        newReferral.user = {\n          id: uid,\n          firstName: userData.firstName,\n          lastName: userData.lastName,\n          image: userData.image\n        };\n      }\n      if (newReferral.phoneNumber)\n        newReferral.phoneNumber = purePhone(phoneNumber);\n      if (newReferral.email) newReferral.email = email;\n      if (newReferral.name) newReferral.name = name;\n      newReferral.time = moment().unix();\n      newReferral.date = moment().format();\n      newReferral = <DirectReferral>newReferral;\n      break;\n  }\n\n  // add referral\n  await firestore.collection(\"referrals\").add(newReferral);\n\n  // send out notification\n  await referralNotification(newReferral);\n};\n\nexport default async (req: any, res: any) => {\n  try {\n    const {\n      uid,\n      type,\n      name,\n      phoneNumber,\n      email\n    }: {\n      uid?: string;\n      type: \"web\" | \"direct\";\n      name?: string;\n      phoneNumber: string;\n      email?: string;\n    } = req.body;\n\n    await addReferral(type, phoneNumber, uid, name, email);\n\n    // successful post\n    res.status(200).send();\n  } catch (error) {\n    res.status(500).send(error);\n    console.log(\"Error: \" + error);\n    Sentry.captureException(error);\n  }\n};\n"],"file":"addReferral.js"}