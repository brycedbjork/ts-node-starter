{"version":3,"sources":["../../../src/services/refer/matchReferral.ts"],"names":["uid","user","formattedPhone","phoneNumber","firestore","collection","where","get","phoneMatches","email","emailMatches","results","docs","map","doc","id","data","length","sort","a","b","time","match","referral"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;0BAIe,iBAAOA,GAAP,EAAoBC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AACb;AACMC,YAAAA,cAFO,GAEU,4BAAUD,IAAI,CAACE,WAAf,CAFV;AAAA;AAAA,mBAGcC,oBACxBC,UADwB,CACb,WADa,EAExBC,KAFwB,CAElB,aAFkB,EAEH,IAFG,EAEGJ,cAFH,EAGxBK,GAHwB,EAHd;;AAAA;AAGPC,YAAAA,YAHO;AAAA;AAAA,mBAOcJ,oBACxBC,UADwB,CACb,WADa,EAExBC,KAFwB,CAElB,OAFkB,EAET,IAFS,EAEHL,IAAI,CAACQ,KAFF,EAGxBF,GAHwB,EAPd;;AAAA;AAOPG,YAAAA,YAPO;AAWPC,YAAAA,OAXO,gCAYRH,YAAY,CAACI,IAAb,CAAkBC,GAAlB,CAAsB,UAAAC,GAAG,EAAI;AAC9B;AAASC,gBAAAA,EAAE,EAAED,GAAG,CAACC;AAAjB,iBAAwBD,GAAG,CAACE,IAAJ,EAAxB;AACD,aAFE,CAZQ,sBAeRN,YAAY,CAACE,IAAb,CAAkBC,GAAlB,CAAsB,UAAAC,GAAG,EAAI;AAC9B;AAASC,gBAAAA,EAAE,EAAED,GAAG,CAACC;AAAjB,iBAAwBD,GAAG,CAACE,IAAJ,EAAxB;AACD,aAFE,CAfQ,IAoBb;;AApBa,kBAqBTL,OAAO,CAACM,MAAR,IAAkB,CArBT;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAyBb;AACAN,YAAAA,OAAO,CAACO,IAAR,CAAa,UAACC,CAAD,EAASC,CAAT,EAAoB;AAC/B,qBAAOA,CAAC,CAACC,IAAF,GAASF,CAAC,CAACE,IAAX,GAAkB,CAAlB,GAAsB,CAAC,CAA9B;AACD,aAFD,EA1Ba,CA8Bb;;AACMC,YAAAA,KA/BO,GA+BMX,OAAO,CAAC,CAAD,CA/Bb;;AAAA,kBAgCTW,KAAK,CAACrB,IAAN,IAAcqB,KAAK,CAACrB,IAAN,CAAWc,EAhChB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAiCL,4BAAWf,GAAX,EAAgB;AACpBuB,cAAAA,QAAQ,EAAED,KAAK,CAACrB,IAAN,CAAWc;AADD,aAAhB,CAjCK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { updateUser } from \"../user/updateUser\";\nimport { Student, Hirer } from \"../../schemas/User\";\nimport { firestore } from \"../../firebase\";\nimport { purePhone } from \"../../utils/formatPhone\";\n\n/*\nTakes uid, user entity and credits referer\n*/\n\nexport default async (uid: string, user: Student | Hirer) => {\n  // find referrals that match user\n  const formattedPhone = purePhone(user.phoneNumber);\n  const phoneMatches = await firestore\n    .collection(\"referrals\")\n    .where(\"phoneNumber\", \"==\", formattedPhone)\n    .get();\n  const emailMatches = await firestore\n    .collection(\"referrals\")\n    .where(\"email\", \"==\", user.email)\n    .get();\n  const results = [\n    ...phoneMatches.docs.map(doc => {\n      return { id: doc.id, ...doc.data() };\n    }),\n    ...emailMatches.docs.map(doc => {\n      return { id: doc.id, ...doc.data() };\n    })\n  ];\n\n  // only continue if we have some matches\n  if (results.length == 0) {\n    return;\n  }\n\n  // sort results by time (latest referrals first)\n  results.sort((a: any, b: any) => {\n    return b.time > a.time ? 1 : -1;\n  });\n\n  // latest referral is the one we will match with the user\n  const match: any = results[0];\n  if (match.user && match.user.id) {\n    await updateUser(uid, {\n      referral: match.user.id\n    });\n  }\n\n  // delete all of the referrals that matched\n  // results.forEach(async result => {\n  //   await firestore\n  //     .collection(\"referrals\")\n  //     .doc(result.id)\n  //     .delete();\n  // });\n};\n"],"file":"matchReferral.js"}