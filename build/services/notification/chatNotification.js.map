{"version":3,"sources":["../../../src/services/notification/chatNotification.ts"],"names":["from","fromData","to","message","chatId","userPromises","map","id","Promise","all","usersData","toBePushed","toBeTexted","numbers","toBeEmailed","emails","forEach","user","notifications","chat","push","text","phoneNumber","email","uid","body","title","firstName","data","userPhoneNumber","userEmail","type"],"mappings":";;;;;;;AAIA;;AAEA;;AACA;;AACA;;;;;;;;AAIA;;;;;;;;0BAIe,iBACbA,IADa,EAEbC,QAFa,EAGbC,EAHa,EAIbC,OAJa,EAKbC,MALa;AAAA;AAAA;AAAA;AAAA;AAAA;AAOPC,YAAAA,YAPO,GAOQH,EAAE,CAACI,GAAH,CAAO,UAAAC,EAAE;AAAA,qBAAI,sBAAQA,EAAR,EAAY,IAAZ,CAAJ;AAAA,aAAT,CAPR;AAAA;AAAA,mBAQWC,OAAO,CAACC,GAAR,CAAYJ,YAAZ,CARX;;AAAA;AAQPK,YAAAA,SARO;AAUTC,YAAAA,UAVS,GAUc,EAVd;AAWTC,YAAAA,UAXS,GAWc,EAXd;AAYTC,YAAAA,OAZS,GAYW,EAZX;AAaTC,YAAAA,WAbS,GAae,EAbf;AAcTC,YAAAA,MAdS,GAcU,EAdV;AAebL,YAAAA,SAAS,CAACM,OAAV,CAAkB,UAAAC,IAAI,EAAI;AACxB,kBAAIA,IAAI,CAACC,aAAL,IAAsBD,IAAI,CAACC,aAAL,CAAmBC,IAA7C,EAAmD;AACjD,oBAAIF,IAAI,CAACC,aAAL,CAAmBC,IAAnB,CAAwBC,IAA5B,EAAkC;AAChCT,kBAAAA,UAAU,CAACS,IAAX,CAAwBH,IAAI,CAACV,EAA7B;AACD;;AACD,oBAAIU,IAAI,CAACC,aAAL,CAAmBC,IAAnB,CAAwBE,IAA5B,EAAkC;AAChCT,kBAAAA,UAAU,CAACQ,IAAX,CAAwBH,IAAI,CAACV,EAA7B;AACAM,kBAAAA,OAAO,CAACO,IAAR,CAAaH,IAAI,CAACK,WAAlB;AACD;;AACD,oBAAIL,IAAI,CAACC,aAAL,CAAmBC,IAAnB,CAAwBI,KAA5B,EAAmC;AACjCT,kBAAAA,WAAW,CAACM,IAAZ,CAAyBH,IAAI,CAACV,EAA9B;AACAQ,kBAAAA,MAAM,CAACK,IAAP,CAAYH,IAAI,CAACM,KAAjB;AACD;AACF;AACF,aAdD;AAfa;AAAA,mBA+BP,sBAAK;AACTC,cAAAA,GAAG,EAAEb,UADI;AAETc,cAAAA,IAAI,EAAEtB,OAFG;AAGTuB,cAAAA,KAAK,EAAEzB,QAAQ,CAAC0B,SAHP;AAITC,cAAAA,IAAI,EAAE;AACJxB,gBAAAA,MAAM,EAANA;AADI;AAJG,aAAL,CA/BO;;AAAA;AAAA;AAAA,mBAwCP,sBAAK;AACToB,cAAAA,GAAG,EAAEZ,UADI;AAETT,cAAAA,OAAO,YAAKF,QAAQ,CAAC0B,SAAd,eAA4BxB,OAA5B,CAFE;AAGT0B,cAAAA,eAAe,EAAEhB;AAHR,aAAL,CAxCO;;AAAA;AAAA;AAAA,mBA8CP,uBAAM;AACVW,cAAAA,GAAG,EAAEV,WADK;AAEVgB,cAAAA,SAAS,EAAEf,MAFD;AAGVgB,cAAAA,IAAI,EAAE,YAHI;AAIV3B,cAAAA,MAAM,EAANA,MAJU;AAKVH,cAAAA,QAAQ,EAARA,QALU;AAMVE,cAAAA,OAAO,EAAPA;AANU,aAAN,CA9CO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { messaging, firestore } from \"../../firebase\";\nimport admin from \"firebase-admin\";\nimport { Job } from \"../../schemas/Job\";\nimport { getJob } from \"../job/getJob\";\nimport { getUser } from \"../user/getUser\";\nimport { getChat } from \"../chat/getChat\";\nimport push from \"./helpers/push\";\nimport text from \"./helpers/text\";\nimport email from \"./helpers/email\";\nimport { Chat } from \"../../schemas/Chat\";\nimport { Student, Hirer } from \"../../schemas/User\";\n\n/*\nSends notification to other chat participant(s) after new message\n*/\n\nexport default async (\n  from: string,\n  fromData: Student | Hirer,\n  to: string[],\n  message: string,\n  chatId: string\n) => {\n  const userPromises = to.map(id => getUser(id, null));\n  const usersData = await Promise.all(userPromises);\n\n  let toBePushed: string[] = [];\n  let toBeTexted: string[] = [];\n  let numbers: string[] = [];\n  let toBeEmailed: string[] = [];\n  let emails: string[] = [];\n  usersData.forEach(user => {\n    if (user.notifications && user.notifications.chat) {\n      if (user.notifications.chat.push) {\n        toBePushed.push(<string>user.id);\n      }\n      if (user.notifications.chat.text) {\n        toBeTexted.push(<string>user.id);\n        numbers.push(user.phoneNumber);\n      }\n      if (user.notifications.chat.email) {\n        toBeEmailed.push(<string>user.id);\n        emails.push(user.email);\n      }\n    }\n  });\n\n  await push({\n    uid: toBePushed,\n    body: message,\n    title: fromData.firstName,\n    data: {\n      chatId\n    }\n  });\n\n  await text({\n    uid: toBeTexted,\n    message: `${fromData.firstName}: ${message}`,\n    userPhoneNumber: numbers\n  });\n\n  await email({\n    uid: toBeEmailed,\n    userEmail: emails,\n    type: \"newMessage\",\n    chatId,\n    fromData,\n    message\n  });\n};\n"],"file":"chatNotification.js"}