{"version":3,"sources":["../../../src/services/notification/jobInviteNotification.ts"],"names":["jobId","jobData","invited","userPromises","Object","keys","map","user","Promise","all","invitedStudents","toBePushed","toBeTexted","numbers","toBeEmailed","emails","forEach","student","notifications","job","push","id","text","phoneNumber","email","uid","body","hirer","firstName","type","data","message","userPhoneNumber","userEmail"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAGA;;;;;;;;0BAIe,iBAAOA,KAAP,EAAsBC,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAERA,OAFQ;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAEiB,oBAAOD,KAAP,CAFjB;;AAAA;AAECC,YAAAA,OAFD;;AAAA;AAAA,gBAIRA,OAAO,CAACC,OAJA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AASb;AACIC,YAAAA,YAVS,GAUaC,MAAM,CAACC,IAAP,CAAYJ,OAAO,CAACC,OAApB,EAA6BI,GAA7B,CAAiC,UAAAC,IAAI;AAAA,qBAC7D,sBAAQA,IAAR,EAAc,SAAd,CAD6D;AAAA,aAArC,CAVb;AAAA;AAAA,mBAaiBC,OAAO,CAACC,GAAR,CAAYN,YAAZ,CAbjB;;AAAA;AAaPO,YAAAA,eAbO;AAeb;AACIC,YAAAA,UAhBS,GAgBc,EAhBd;AAiBTC,YAAAA,UAjBS,GAiBc,EAjBd;AAkBTC,YAAAA,OAlBS,GAkBW,EAlBX;AAmBTC,YAAAA,WAnBS,GAmBe,EAnBf;AAoBTC,YAAAA,MApBS,GAoBU,EApBV;AAqBbL,YAAAA,eAAe,CAACM,OAAhB,CAAwB,UAAAC,OAAO,EAAI;AACjC,kBAAIA,OAAO,CAACC,aAAR,IAAyBD,OAAO,CAACC,aAAR,CAAsBC,GAAnD,EAAwD;AACtD,oBAAIF,OAAO,CAACC,aAAR,CAAsBC,GAAtB,CAA0BC,IAA1B,KAAmC,IAAvC,EAA6C;AAC3CT,kBAAAA,UAAU,CAACS,IAAX,CAAgBH,OAAO,CAACI,EAAxB;AACD;;AACD,oBAAIJ,OAAO,CAACC,aAAR,CAAsBC,GAAtB,CAA0BG,IAA1B,KAAmC,IAAvC,EAA6C;AAC3CV,kBAAAA,UAAU,CAACQ,IAAX,CAAgBH,OAAO,CAACI,EAAxB;AACAR,kBAAAA,OAAO,CAACO,IAAR,CAAaH,OAAO,CAACM,WAArB;AACD;;AACD,oBAAIN,OAAO,CAACC,aAAR,CAAsBC,GAAtB,CAA0BK,KAA1B,KAAoC,IAAxC,EAA8C;AAC5CV,kBAAAA,WAAW,CAACM,IAAZ,CAAiBH,OAAO,CAACI,EAAzB;AACAN,kBAAAA,MAAM,CAACK,IAAP,CAAYH,OAAO,CAACO,KAApB;AACD;AACF;AACF,aAdD;AArBa;AAAA,mBAqCP,sBAAK;AACTC,cAAAA,GAAG,EAAEd,UADI;AAETe,cAAAA,IAAI,YAAKzB,OAAO,CAAC0B,KAAR,CAAcC,SAAnB,kCAAoD3B,OAAO,CAAC4B,IAA5D,SAFK;AAGTC,cAAAA,IAAI,EAAE;AAAE9B,gBAAAA,KAAK,EAALA;AAAF;AAHG,aAAL,CArCO;;AAAA;AAAA;AAAA,mBA0CP,sBAAK;AACTyB,cAAAA,GAAG,EAAEb,UADI;AAETmB,cAAAA,OAAO,YAAK9B,OAAO,CAAC0B,KAAR,CAAcC,SAAnB,kCACL3B,OAAO,CAAC4B,IADH,wCAEuB7B,KAFvB,CAFE;AAKTgC,cAAAA,eAAe,EAAEnB;AALR,aAAL,CA1CO;;AAAA;AAAA;AAAA,mBAiDP,uBAAM;AACVY,cAAAA,GAAG,EAAEX,WADK;AAEVe,cAAAA,IAAI,EAAE,YAFI;AAGVI,cAAAA,SAAS,EAAElB,MAHD;AAIVf,cAAAA,KAAK,EAALA,KAJU;AAKVC,cAAAA,OAAO,EAAPA;AALU,aAAN,CAjDO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { messaging, firestore } from \"../../firebase\";\nimport admin from \"firebase-admin\";\nimport { getJob } from \"../job/getJob\";\nimport { getUser } from \"../user/getUser\";\nimport push from \"./helpers/push\";\nimport text from \"./helpers/text\";\nimport email from \"./helpers/email\";\nimport { Job } from \"../../schemas/Job\";\n\n/*\nSends out notification for job to invited students\n*/\n\nexport default async (jobId: string, jobData?: Job) => {\n  // get job\n  if (!jobData) jobData = await getJob(jobId);\n\n  if (!jobData.invited) {\n    // nobody to invite\n    return;\n  }\n\n  // get invited students\n  let userPromises: any[] = Object.keys(jobData.invited).map(user =>\n    getUser(user, \"student\")\n  );\n  const invitedStudents = await Promise.all(userPromises);\n\n  // construct notification calls\n  let toBePushed: string[] = [];\n  let toBeTexted: string[] = [];\n  let numbers: string[] = [];\n  let toBeEmailed: string[] = [];\n  let emails: string[] = [];\n  invitedStudents.forEach(student => {\n    if (student.notifications && student.notifications.job) {\n      if (student.notifications.job.push === true) {\n        toBePushed.push(student.id);\n      }\n      if (student.notifications.job.text === true) {\n        toBeTexted.push(student.id);\n        numbers.push(student.phoneNumber);\n      }\n      if (student.notifications.job.email === true) {\n        toBeEmailed.push(student.id);\n        emails.push(student.email);\n      }\n    }\n  });\n\n  await push({\n    uid: toBePushed,\n    body: `${jobData.hirer.firstName} invited you to do a ${jobData.type} job`,\n    data: { jobId }\n  });\n  await text({\n    uid: toBeTexted,\n    message: `${jobData.hirer.firstName} invited you to do a ${\n      jobData.type\n    } job\\nhireastudent.org/job/${jobId}`,\n    userPhoneNumber: numbers\n  });\n  await email({\n    uid: toBeEmailed,\n    type: \"invitedJob\",\n    userEmail: emails,\n    jobId,\n    jobData\n  });\n};\n"],"file":"jobInviteNotification.js"}