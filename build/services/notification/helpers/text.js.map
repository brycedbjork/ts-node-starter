{"version":3,"sources":["../../../../src/services/notification/helpers/text.ts"],"names":["client","process","env","TWILIO_ACCOUNT_SID","TWILIO_AUTH_TOKEN","twilioNumber","TWILIO_NUMBER","text","phoneNumber","message","textMessage","body","to","from","messages","create","options","uid","userPhoneNumber","numbers","userData","push","userPromises","map","singleId","Promise","all","usersData","textPromises","number"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAEA,IAAMA,MAAM,GAAG,wBACbC,OAAO,CAACC,GAAR,CAAYC,kBADC,EAEbF,OAAO,CAACC,GAAR,CAAYE,iBAFC,CAAf;AAIA,IAAMC,YAAY,GAAGJ,OAAO,CAACC,GAAR,CAAYI,aAAjC,C,CAAgD;;AAEhD;;;;AAIO,IAAMC,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,iBAAOC,WAAP,EAA4BC,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AACZC,YAAAA,WADY,GACE;AAClBC,cAAAA,IAAI,EAAEF,OADY;AAElBG,cAAAA,EAAE,EAAEJ,WAFc;AAGlBK,cAAAA,IAAI,EAAER;AAHY,aADF;AAAA;AAAA,mBAMZL,MAAM,CAACc,QAAP,CAAgBC,MAAhB,CAAuBL,WAAvB,CANY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAJH,IAAI;AAAA;AAAA;AAAA,GAAV;;;;;;;;;0BAcQ,kBAAOS,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACLC,YAAAA,GADK,GAC6BD,OAD7B,CACLC,GADK,EACAR,OADA,GAC6BO,OAD7B,CACAP,OADA,EACSS,eADT,GAC6BF,OAD7B,CACSE,eADT;AAETC,YAAAA,OAFS,GAEW,EAFX;;AAAA,gBAGRD,eAHQ;AAAA;AAAA;AAAA;;AAAA,kBAIP,OAAOD,GAAP,KAAe,QAJR;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAMc,sBAAQA,GAAR,EAAa,IAAb,CANd;;AAAA;AAMHG,YAAAA,QANG;AAOTD,YAAAA,OAAO,CAACE,IAAR,CAAaD,QAAQ,CAACZ,WAAtB;AAPS;AAAA;;AAAA;AAST;AACMc,YAAAA,YAVG,GAUuBL,GAAX,CAAgBM,GAAhB,CAAoB,UAAAC,QAAQ;AAAA,qBAC/C,sBAAQA,QAAR,EAAkB,IAAlB,CAD+C;AAAA,aAA5B,CAVZ;AAAA;AAAA,mBAaeC,OAAO,CAACC,GAAR,CAAYJ,YAAZ,CAbf;;AAAA;AAaHK,YAAAA,SAbG;AAcTR,YAAAA,OAAO,GAAGQ,SAAS,CAACJ,GAAV,CAAc,UAAAH,QAAQ;AAAA,qBAAIA,QAAQ,CAACZ,WAAb;AAAA,aAAtB,CAAV;;AAdS;AAAA;AAAA;;AAAA;AAiBX,gBAAI,OAAOU,eAAP,KAA2B,QAA/B,EAAyC;AACvC;AACAC,cAAAA,OAAO,CAACE,IAAR,CAAaH,eAAb;AACD,aAHD,MAGO;AACLC,cAAAA,OAAO,GAAGD,eAAV;AACD;;AAtBU;AAyBPU,YAAAA,YAzBO,GAyBQT,OAAO,CAACI,GAAR,CAAY,UAAAM,MAAM;AAAA,qBAAItB,IAAI,CAACsB,MAAD,EAASpB,OAAT,CAAR;AAAA,aAAlB,CAzBR;AAAA;AAAA,mBA0BPgB,OAAO,CAACC,GAAR,CAAYE,YAAZ,CA1BO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import twilio from \"twilio\";\nimport { getUser } from \"../../user/getUser\";\n\nconst client = twilio(\n  process.env.TWILIO_ACCOUNT_SID,\n  process.env.TWILIO_AUTH_TOKEN\n);\nconst twilioNumber = process.env.TWILIO_NUMBER; // your twilio phone number\n\n/*\nSends text message(s)\n*/\n\nexport const text = async (phoneNumber: string, message: string) => {\n  const textMessage = {\n    body: message,\n    to: phoneNumber,\n    from: twilioNumber\n  };\n  await client.messages.create(textMessage);\n};\n\nexport interface TextOptions {\n  uid?: string | string[];\n  message: string;\n  userPhoneNumber?: string | string[];\n}\nexport default async (options: TextOptions) => {\n  const { uid, message, userPhoneNumber } = options;\n  let numbers: string[] = [];\n  if (!userPhoneNumber) {\n    if (typeof uid === \"string\") {\n      // single user\n      const userData = await getUser(uid, null);\n      numbers.push(userData.phoneNumber);\n    } else {\n      // multiple users\n      const userPromises = (<string[]>uid).map(singleId =>\n        getUser(singleId, null)\n      );\n      const usersData = await Promise.all(userPromises);\n      numbers = usersData.map(userData => userData.phoneNumber);\n    }\n  } else {\n    if (typeof userPhoneNumber === \"string\") {\n      // single user\n      numbers.push(userPhoneNumber);\n    } else {\n      numbers = userPhoneNumber;\n    }\n  }\n\n  const textPromises = numbers.map(number => text(number, message));\n  await Promise.all(textPromises);\n};\n"],"file":"text.js"}