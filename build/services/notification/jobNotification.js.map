{"version":3,"sources":["../../../src/services/notification/jobNotification.ts"],"names":["geoFirestore","GeoFirestore","firestore","geoUserLocations","collection","NOTIFICATION_RADIUS","jobId","jobData","coordinates","latitude","longitude","near","center","admin","GeoPoint","radius","where","query","get","queryResults","userPromises","forEach","result","push","id","Promise","all","nearbyStudents","toBePushed","toBeTexted","numbers","toBeEmailed","emails","student","notifications","job","text","phoneNumber","email","uid","body","type","message","userPhoneNumber","userEmail"],"mappings":"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","sourcesContent":["import { messaging, firestore } from \"../../firebase\";\nimport admin from \"firebase-admin\";\nimport {\n  GeoFirestore,\n  GeoCollectionReference,\n  GeoDocumentReference,\n  GeoQuery,\n  GeoQuerySnapshot\n} from \"geofirestore\";\nlet geoFirestore = new GeoFirestore(firestore);\nconst geoUserLocations: GeoCollectionReference = geoFirestore.collection(\n  \"userLocations\"\n);\nimport { getJob } from \"../job/getJob\";\nimport { getUser } from \"../user/getUser\";\nimport push from \"./helpers/push\";\nimport text from \"./helpers/text\";\nimport email from \"./helpers/email\";\nimport { Job } from \"../../schemas/Job\";\n\n/*\nSends out notification for job to nearby students\n*/\n\nconst NOTIFICATION_RADIUS = 20; // km\n\nexport default async (jobId: string, jobData?: Job) => {\n  // get job\n  if (!jobData) jobData = await getJob(jobId);\n\n  // pull nearby students\n  const { latitude, longitude } = jobData.coordinates;\n  const query: GeoQuery = await geoUserLocations\n    .near({\n      center: new admin.firestore.GeoPoint(latitude, longitude),\n      radius: NOTIFICATION_RADIUS\n    })\n    .where(\"type\", \"==\", \"student\");\n  const queryResults = await query.get();\n\n  // get nearby students\n  let userPromises: any[] = [];\n  queryResults.forEach((result: any) => {\n    userPromises.push(getUser(result.id, \"student\"));\n  });\n  const nearbyStudents = await Promise.all(userPromises);\n\n  // construct notification calls\n  let toBePushed: string[] = [];\n  let toBeTexted: string[] = [];\n  let numbers: string[] = [];\n  let toBeEmailed: string[] = [];\n  let emails: string[] = [];\n  nearbyStudents.forEach(student => {\n    if (student.notifications && student.notifications.job) {\n      if (student.notifications.job.push === true) {\n        toBePushed.push(student.id);\n      }\n      if (student.notifications.job.text === true) {\n        toBeTexted.push(student.id);\n        numbers.push(student.phoneNumber);\n      }\n      if (student.notifications.job.email === true) {\n        toBeEmailed.push(student.id);\n        emails.push(student.email);\n      }\n    }\n  });\n\n  await push({ uid: toBePushed, body: `${jobData.type} job available nearby` });\n  await text({\n    uid: toBeTexted,\n    message: `${\n      jobData.type\n    } job available nearby\\nhireastudent.org/job/${jobId}`,\n    userPhoneNumber: numbers\n  });\n  await email({ uid: toBeEmailed, type: \"nearbyJob\", userEmail: emails });\n};\n"],"file":"jobNotification.js"}